{"ast":null,"code":"var _jsxFileName = \"/home/gabriel/atividades-trybe/02-desenvolvimento-front-end/bloco-12-ciclo-de-vida-de-componentes-e-react-router/Dia_1-ciclo-de-vida-de-componentes/randomuser/src/App.js\";\n// PersonDetails.js\nimport React, { Component } from 'react';\nimport Loading from './Loading';\nimport PersonCard from './PersonCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(); // No construtor, criamos os nossos estados de `loading` e `person`,\n    // que vai receber o retorno da API.\n    // Começamos com o `loading` como `true`, pois queremos que ele exiba a nossa \n    // mensagem de \"carregando\" enquanto não renderizamos a primeira tela.\n    // E o `person` setamos como um array vazio,\n    // pois ele irá receber o retorno da nossa API.\n\n    this.state = {\n      loading: true,\n      person: []\n    };\n  } // Como estudamos, o `componentDidMount` vai disparar ações após o componente\n  // ser inserido no DOM, por isso dizemos que é\n  // ideal para realizar requisições. Atribuímos ao nosso estado `person`\n  // o `data.results`, que traz os nossos dados da API.\n  // Além disso, atribuímos  o `loading` como `false`, uma vez que, quando a\n  // página é renderizada, não teremos mais a mensagem de \"carregando\".\n\n\n  componentDidMount() {\n    const url = 'https://api.randomuser.me/';\n    fetch(url).then(response => response.json()).then(data => {\n      // Note que, nesse ponto, o nosso data retorna um objeto, e, se acessarmos\n      // o `data.results`, teremos nosso array de objetos com as informações\n      // das pessoas que são geradas aleatoriamente pela requisição.\n      // console.log(data);\n      // console.log(data.results);\n      this.setState({\n        person: data.results,\n        loading: false\n      });\n    });\n  } // O `shouldComponentUpdate` irá verificar se a pessoa retornada pela API tem\n  // mais de 50 anos e, com isso, irá autorizar, ou não, a atualização do componente.\n  // Caso não atualize, uma mensagem de \"carregando...\" será exibida na tela.\n  // Caso ocorra essa situação, dê um `console.log` no `nextState` e verifique a\n  // idade da pessoa que é trazida pela API.\n\n\n  shouldComponentUpdate(_nextProps, nextState) {\n    // console.log(nextState);\n    const AGE = 50;\n\n    if (nextState.person[0].dob.age > AGE) {\n      return false;\n    }\n\n    return true;\n  } // Considerando que a API retorna um array de objetos,\n  // a função abaixo foi criada para extrair os dados que precisamos e\n  // atribuir esses dados a suas respectivas keys.\n\n\n  getUserElements(user) {\n    return {\n      name: `${user.name.first} ${user.name.last}`,\n      email: user.email,\n      age: user.dob.age,\n      image: user.picture.thumbnail\n    };\n  }\n\n  render() {\n    const {\n      person,\n      loading\n    } = this.state; // Condição criada para verificar o estado de `loading`. Se for `true`, irá\n    // trazer o componente de `Loading` com a mensagem de \"carregando...\"\n\n    if (loading) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }, this);\n    return (\n      /*#__PURE__*/\n      // Para renderizar as informações que precisamos, foi feito um `map` que \n      // traz o componente de `PersonCard`, que contém as informações com nome,\n      // e-mail, idade e a foto. Passamos como props a função de `getUserElements`\n      // que retorna um objeto com as informações da pessoa e, como parâmetro da\n      // função, passamos o `currentPerson`.\n      _jsxDEV(\"div\", {\n        children: person.map(currentPerson => /*#__PURE__*/_jsxDEV(PersonCard, {\n          person: this.getUserElements(currentPerson)\n        }, currentPerson.login.uuid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","Component","Loading","PersonCard","App","constructor","state","loading","person","componentDidMount","url","fetch","then","response","json","data","setState","results","shouldComponentUpdate","_nextProps","nextState","AGE","dob","age","getUserElements","user","name","first","last","email","image","picture","thumbnail","render","map","currentPerson","login","uuid"],"sources":["/home/gabriel/atividades-trybe/02-desenvolvimento-front-end/bloco-12-ciclo-de-vida-de-componentes-e-react-router/Dia_1-ciclo-de-vida-de-componentes/randomuser/src/App.js"],"sourcesContent":["// PersonDetails.js\nimport React, { Component } from 'react';\nimport Loading from './Loading';\nimport PersonCard from './PersonCard';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    // No construtor, criamos os nossos estados de `loading` e `person`,\n    // que vai receber o retorno da API.\n    // Começamos com o `loading` como `true`, pois queremos que ele exiba a nossa \n    // mensagem de \"carregando\" enquanto não renderizamos a primeira tela.\n    // E o `person` setamos como um array vazio,\n    // pois ele irá receber o retorno da nossa API.\n\n    this.state = {\n      loading: true,\n      person: [],\n    };\n  }\n\n  // Como estudamos, o `componentDidMount` vai disparar ações após o componente\n  // ser inserido no DOM, por isso dizemos que é\n  // ideal para realizar requisições. Atribuímos ao nosso estado `person`\n  // o `data.results`, que traz os nossos dados da API.\n  // Além disso, atribuímos  o `loading` como `false`, uma vez que, quando a\n  // página é renderizada, não teremos mais a mensagem de \"carregando\".\n\n  componentDidMount() {\n    const url = 'https://api.randomuser.me/';\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        // Note que, nesse ponto, o nosso data retorna um objeto, e, se acessarmos\n        // o `data.results`, teremos nosso array de objetos com as informações\n        // das pessoas que são geradas aleatoriamente pela requisição.\n        // console.log(data);\n        // console.log(data.results);\n        this.setState({\n          person: data.results,\n          loading: false,\n        });\n      });\n  }\n\n  // O `shouldComponentUpdate` irá verificar se a pessoa retornada pela API tem\n  // mais de 50 anos e, com isso, irá autorizar, ou não, a atualização do componente.\n  // Caso não atualize, uma mensagem de \"carregando...\" será exibida na tela.\n  // Caso ocorra essa situação, dê um `console.log` no `nextState` e verifique a\n  // idade da pessoa que é trazida pela API.\n  shouldComponentUpdate(_nextProps, nextState) {\n    // console.log(nextState);\n    const AGE = 50;\n    if (nextState.person[0].dob.age > AGE) {\n      return false;\n    }\n    return true;\n  }\n\n  // Considerando que a API retorna um array de objetos,\n  // a função abaixo foi criada para extrair os dados que precisamos e\n  // atribuir esses dados a suas respectivas keys.\n  getUserElements(user) {\n    return {\n      name: `${user.name.first} ${user.name.last}`,\n      email: user.email,\n      age: user.dob.age,\n      image: user.picture.thumbnail,\n    };\n  }\n\n  render() {\n    const { person, loading } = this.state;\n    // Condição criada para verificar o estado de `loading`. Se for `true`, irá\n    // trazer o componente de `Loading` com a mensagem de \"carregando...\"\n    if (loading) return <Loading />;\n    return (\n      // Para renderizar as informações que precisamos, foi feito um `map` que \n      // traz o componente de `PersonCard`, que contém as informações com nome,\n      // e-mail, idade e a foto. Passamos como props a função de `getUserElements`\n      // que retorna um objeto com as informações da pessoa e, como parâmetro da\n      // função, passamos o `currentPerson`.\n      <div>\n        {person.map((currentPerson) => (\n          <PersonCard\n            key={ currentPerson.login.uuid }\n            person={ this.getUserElements(currentPerson) }\n          />))}\n      </div>\n    );\n  }\n}\n\nexport default App;"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;EAC1BI,WAAW,GAAG;IACZ,QADY,CAGZ;IACA;IACA;IACA;IACA;IACA;;IAEA,KAAKC,KAAL,GAAa;MACXC,OAAO,EAAE,IADE;MAEXC,MAAM,EAAE;IAFG,CAAb;EAID,CAfyB,CAiB1B;EACA;EACA;EACA;EACA;EACA;;;EAEAC,iBAAiB,GAAG;IAClB,MAAMC,GAAG,GAAG,4BAAZ;IACAC,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,IAAD,IAAU;MACd;MACA;MACA;MACA;MACA;MACA,KAAKC,QAAL,CAAc;QACZR,MAAM,EAAEO,IAAI,CAACE,OADD;QAEZV,OAAO,EAAE;MAFG,CAAd;IAID,CAZH;EAaD,CAvCyB,CAyC1B;EACA;EACA;EACA;EACA;;;EACAW,qBAAqB,CAACC,UAAD,EAAaC,SAAb,EAAwB;IAC3C;IACA,MAAMC,GAAG,GAAG,EAAZ;;IACA,IAAID,SAAS,CAACZ,MAAV,CAAiB,CAAjB,EAAoBc,GAApB,CAAwBC,GAAxB,GAA8BF,GAAlC,EAAuC;MACrC,OAAO,KAAP;IACD;;IACD,OAAO,IAAP;EACD,CArDyB,CAuD1B;EACA;EACA;;;EACAG,eAAe,CAACC,IAAD,EAAO;IACpB,OAAO;MACLC,IAAI,EAAG,GAAED,IAAI,CAACC,IAAL,CAAUC,KAAM,IAAGF,IAAI,CAACC,IAAL,CAAUE,IAAK,EADtC;MAELC,KAAK,EAAEJ,IAAI,CAACI,KAFP;MAGLN,GAAG,EAAEE,IAAI,CAACH,GAAL,CAASC,GAHT;MAILO,KAAK,EAAEL,IAAI,CAACM,OAAL,CAAaC;IAJf,CAAP;EAMD;;EAEDC,MAAM,GAAG;IACP,MAAM;MAAEzB,MAAF;MAAUD;IAAV,IAAsB,KAAKD,KAAjC,CADO,CAEP;IACA;;IACA,IAAIC,OAAJ,EAAa,oBAAO,QAAC,OAAD;MAAA;MAAA;MAAA;IAAA,QAAP;IACb;MAAA;MACE;MACA;MACA;MACA;MACA;MACA;QAAA,UACGC,MAAM,CAAC0B,GAAP,CAAYC,aAAD,iBACV,QAAC,UAAD;UAEE,MAAM,EAAG,KAAKX,eAAL,CAAqBW,aAArB;QAFX,GACQA,aAAa,CAACC,KAAd,CAAoBC,IAD5B;UAAA;UAAA;UAAA;QAAA,QADD;MADH;QAAA;QAAA;QAAA;MAAA;IANF;EAcD;;AAtFyB;;AAyF5B,eAAejC,GAAf"},"metadata":{},"sourceType":"module"}